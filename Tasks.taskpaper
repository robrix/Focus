Parser:
	- parse assignments?
		<optional receiver expression> name = <expression>
	- write the parser as a Focus object so it can be inherited from and overridden.
	- test overall parsing (including trailing whitespace, and no trailing garbage).
	- parse functions. Decide on a syntax first, of courseâ€¦
Hash table:
	- use FArray internally.
Compiler:
	- ought to be a real object.
	- create and initialize a function pass manager on creation.
		LLVMCreateFunctionPassManagerForModule
		LLVMInitializeFunctionPassManager
		- add optimization passes from llvm-c/Transforms/Scalar.h and llvm-c/Transforms/IPO.h.
	- LLVMRunFunctionPassManager as functions are compiled.
	- finalize and dispose of the function pass manager when the compiler is disposed of.
AST:
	- store source information (line number, etc) in the AST nodes.
Evaluator:
	- each source file gets its own context.
	- per-evaluator objects:
		- allocator/GC.
		- prototypes (object, context, function, etc).
		- compiler.
Symbol:
	- make a symbol prototype, and make symbols a proper object type.
	- symbols should consist of a string and a hash.
	- symbols should be uniqued.
Function:
	- should have a name based on its location in the source, where applicable.
	- should have a name based on its assignment as a method, where applicable.
	- organize all the relevant functions into FFunctionPrototype.h. @done(2010-12-11)
	- should have a reference to the evaluator.
	- when evaluating a function, any functions within it should have their contexts set.
	- store the function pointer in the variables hash table. @done(2010-12-02)
