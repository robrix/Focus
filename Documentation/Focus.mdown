#COMPILATION

hammerc uses a two-step bootstrapping mechanism to compile Hammer grammars:

1. Compile the C functions that implement the language mechanisms (rules, in Hammer’s case) to LLVM bitcode.
2. Optimize, lowering the dynamic dispatch mechanisms to static dispatch based on the grammar (or its AST representation), i.e. which specific rule types are involved.

This can be used in Focus as well for dynamic (re)compilation and (re)optimization:

1. Write the AST in (presumably) C. Write functions implementing the language mechanisms.
2. At optimization time, use the source code to lower dynamic dispatch to static dispatch where possible.




#MESSAGING

1. Look up the selector in the receiver.
2. Load the parameters into registers as necessary. This includes the hidden parameters (self, selector).
3. Jump to the block in question.


#MEMORY LAYOUT

At a minimum, an object consists of:

1. A reference to its prototype (possibly null?).
2. A hash table of ivars.
3. A hash table of methods.

Arrays will add to this an unsigned integer *n* followed by *n* references.


#COLLECTIONS

Hash tables can be implemented (efficiently enough) within the language, given arrays.

Proper contiguous arrays require language support.


#CONTROL FLOW

Pattern matching via a match method:

	result = (expression) match: [
		1 => {…},
		2..3 => {…},
		{implements: …} => {}
	] else: {
		…
	}.


